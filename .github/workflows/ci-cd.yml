name: CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]

env:
  DOTNET_VERSION: '8.0.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # test:
  #   name: Run Tests
  #   runs-on: ubuntu-latest
    
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
      
  #   - name: Setup .NET
  #     uses: actions/setup-dotnet@v4
  #     with:
  #       dotnet-version: ${{ env.DOTNET_VERSION }}
        
  #   - name: Restore dependencies
  #     run: dotnet restore
      
  #   - name: Build solution
  #     run: dotnet build --no-restore --configuration Release
      
  #   - name: Run unit tests
  #     run: dotnet test --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory TestResults
      
  #   - name: Generate test coverage report
  #     uses: danielpalme/ReportGenerator-GitHub-Action@5.3.8
  #     with:
  #       reports: 'TestResults/*/coverage.cobertura.xml'
  #       targetdir: 'coveragereport'
  #       reporttypes: 'Html;Cobertura'

  # security-scan:
  #   name: Security Scan
  #   runs-on: ubuntu-latest
  #   needs: test
    
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
      
  #   - name: Setup .NET
  #     uses: actions/setup-dotnet@v4
  #     with:
  #       dotnet-version: ${{ env.DOTNET_VERSION }}
        
  #   - name: Restore dependencies
  #     run: dotnet restore
        
  #   - name: Build for security scan
  #     run: dotnet build --no-restore --configuration Release

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    # needs: [test, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    env:
      DOTNET_VERSION: '8.0.x'
      REGISTRY: docker.io
      IMAGE_NAME: rickymta/volcanion-auth-ddd
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      # Debug secrets
      - name: Check DockerHub secrets
        run: |
          if [ -z "${VOLCANION_DOCKERHUB_USERNAME}" ]; then
            echo "‚ùå VOLCANION_DOCKERHUB_USERNAME is missing!"
          else
            echo "‚úÖ VOLCANION_DOCKERHUB_USERNAME is set"
          fi

          if [ -z "${VOLCANION_DOCKERHUB_TOKEN}" ]; then
            echo "‚ùå VOLCANION_DOCKERHUB_TOKEN is missing!"
          else
            echo "‚úÖ VOLCANION_DOCKERHUB_TOKEN is set (length: ${#VOLCANION_DOCKERHUB_TOKEN})"
          fi
        env:
          VOLCANION_DOCKERHUB_USERNAME: ${{ secrets.VOLCANION_DOCKERHUB_USERNAME }}
          VOLCANION_DOCKERHUB_TOKEN: ${{ secrets.VOLCANION_DOCKERHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.VOLCANION_DOCKERHUB_USERNAME }}
          password: ${{ secrets.VOLCANION_DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # deploy-staging:
  #   name: Deploy to Staging
  #   runs-on: ubuntu-latest
  #   needs: build-and-push
  #   if: github.ref == 'refs/heads/develop'
  #   environment: staging
    
  #   steps:
  #   - name: Deploy to staging
  #     uses: appleboy/ssh-action@v1.2.0
  #     with:
  #       host: ${{ secrets.SERVER_HOST }}
  #       username: ${{ secrets.SERVER_USER }}
  #       key: ${{ secrets.SERVER_SSH_KEY }}
  #       script: |
  #         docker login -u ${{ secrets.VOLCANION_DOCKERHUB_USERNAME }} -p ${{ secrets.VOLCANION_DOCKERHUB_TOKEN }}
  #         docker pull ${{ secrets.VOLCANION_DOCKERHUB_USERNAME }}/volcanion-api:latest
  #         docker stop volcanion-api || true
  #         docker rm volcanion-api || true
  #         docker run -d --name volcanion-api -p 80:80 ${{ secrets.VOLCANION_DOCKERHUB_USERNAME }}/volcanion-api:latest
        
  # deploy-production:
  #   name: Deploy to Production
  #   runs-on: ubuntu-latest
  #   needs: build-and-push
  #   if: github.ref == 'refs/heads/master'
  #   environment: production
    
  #   steps:
  #   - name: Deploy to production
  #     run: |
  #       echo "Deploying to production environment..."
  #       # Add your production deployment logic here
  #       # Example: kubectl apply -f k8s/production/

  # notify:
  #   name: Notify Telegram
  #   runs-on: ubuntu-latest
  #   needs: [deploy-staging]
  #   # needs: [deploy-staging, deploy-production]

  #   if: always() && (needs.deploy-staging.result != 'skipped' || needs.deploy-production.result != 'skipped')
    
  #   steps:
  #   - name: Notify on success
  #     if: (needs.deploy-staging.result == 'success' && needs.deploy-staging.result != 'skipped') || (needs.deploy-production.result == 'success' && needs.deploy-production.result != 'skipped')
  #     run: |
  #       MESSAGE="‚úÖ Deployment successful! üéâ%0A\
  #       Staging result: ${{ needs.deploy-staging.result }}%0A\
  #       Production result: ${{ needs.deploy-production.result }}"
                
  #               curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
  #                   -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
  #                   -d text="$MESSAGE" \
  #                   -d parse_mode="Markdown"

  #           - name: Notify on failure
  #             if: needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure'
  #             run: |
  #               MESSAGE="‚ùå Deployment failed!%0A\
  #       Staging result: ${{ needs.deploy-staging.result }}%0A\
  #       Production result: ${{ needs.deploy-production.result }}"
        
  #       curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
  #            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
  #            -d text="$MESSAGE" \
  #            -d parse_mode="Markdown"

